// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package models

import (
	"errors"
	"fmt"
)

const (
	// ActionTypeView is a ActionType of type View.
	ActionTypeView ActionType = iota
	// ActionTypeClick is a ActionType of type Click.
	ActionTypeClick
	// ActionTypeAddToCart is a ActionType of type Add_to_cart.
	ActionTypeAddToCart
)

var ErrInvalidActionType = errors.New("not a valid ActionType")

const _ActionTypeName = "viewclickadd_to_cart"

var _ActionTypeMap = map[ActionType]string{
	ActionTypeView:      _ActionTypeName[0:4],
	ActionTypeClick:     _ActionTypeName[4:9],
	ActionTypeAddToCart: _ActionTypeName[9:20],
}

// String implements the Stringer interface.
func (x ActionType) String() string {
	if str, ok := _ActionTypeMap[x]; ok {
		return str
	}
	return fmt.Sprintf("ActionType(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x ActionType) IsValid() bool {
	_, ok := _ActionTypeMap[x]
	return ok
}

var _ActionTypeValue = map[string]ActionType{
	_ActionTypeName[0:4]:  ActionTypeView,
	_ActionTypeName[4:9]:  ActionTypeClick,
	_ActionTypeName[9:20]: ActionTypeAddToCart,
}

// ParseActionType attempts to convert a string to a ActionType.
func ParseActionType(name string) (ActionType, error) {
	if x, ok := _ActionTypeValue[name]; ok {
		return x, nil
	}
	return ActionType(0), fmt.Errorf("%s is %w", name, ErrInvalidActionType)
}

// MarshalText implements the text marshaller method.
func (x ActionType) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *ActionType) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseActionType(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
